import sys, re, argparse

import pandas as pd
from itertools import combinations
from scipy.stats import ttest_ind

from pathlib import Path
sys.path.append(str(Path(__file__).resolve().parent))
from helper_functions import parse_input_path

def tost(p1, p2, b):
    _, p_greater = ttest_ind(p1 + b, p2, alternative='greater')
    _, p_less = ttest_ind(p1 - b, p2, alternative='less')
    return max(p_greater, p_less)


parser = argparse.ArgumentParser(description='perform 2-sample t-tests for classes in a barplot')
parser.add_argument('--csv-in', nargs='+', type=str, required=True,
                    help='Input svg.csvs, generated by make_mixture_barplots.py')
parser.add_argument('--expname-regex', type=str, default='[0-9]+_[0-9]+_[0-9]+')
parser.add_argument('--tost-delta', type=float, default=0.10)
parser.add_argument('--out-csv', type=str, required=True)
args = parser.parse_args()

csv_list = parse_input_path(args.csv_in, pattern='*.svg.csv')

df_list = []
for csv_fn in csv_list:
    sdf = pd.read_csv(csv_fn, index_col=0)
    sdf.loc[:,'exp_name'] = re.search(args.expname_regex, Path(csv_fn).stem).group(0)
    df_list.append(sdf)
df = pd.concat(df_list)
estimates_df = df.query('value_type == "estimate"')

# per-experiment 2-sample t-test
tt_df_list = []
for en, sub_estimates_df in estimates_df.groupby('exp_name'):
    mean_df = sub_estimates_df.groupby('coa_type').mean()
    std_df = sub_estimates_df.groupby('coa_type').std()
    delta_df = pd.DataFrame(index=std_df.index, columns=std_df.index)
    for c1, c2 in combinations(std_df.index, 2):
        p_tost = tost(sub_estimates_df.query(f'coa_type == "{c1}"').frac,
                      sub_estimates_df.query(f'coa_type == "{c2}"').frac,
                      args.tost_delta)
        p_tt = ttest_ind(sub_estimates_df.query(f'coa_type == "{c1}"').frac,
                  sub_estimates_df.query(f'coa_type == "{c2}"').frac).pvalue
        tt_df_list.append(pd.Series({'exp_name': en, 'c1': c1, 'c2': c2,
                                     'p_tost': p_tost, 'p_tt': p_tt}))
tt_df = pd.concat(tt_df_list, axis=1).T
tt_df.to_csv(args.out_csv, index=False)
